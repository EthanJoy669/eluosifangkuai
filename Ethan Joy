```python

import pygame

import random



# 初始化Pygame

pygame.init()



# 设置游戏窗口大小和标题

WINDOW_WIDTH = 400

WINDOW_HEIGHT = 600

WINDOW_TITLE = '俄罗斯方块'

WINDOW_BG_COLOR = (255, 255, 255)

BLOCK_SIZE = 20

FONT_SIZE = 30

FONT_COLOR = (0, 0, 0)

FPS = 60



# 创建游戏窗口

window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))

pygame.display.set_caption(WINDOW_TITLE)



# 加载字体

font = pygame.font.SysFont(None, FONT_SIZE)



# 定义方块的形状

SHAPES = [

[[1, 1, 1], [0, 1, 0]],

[[2, 2], [2, 2]],

[[0, 3, 3], [3, 3, 0]],

[[4, 4, 0], [0, 4, 4]],

[[5, 5, 5, 5]],

[[6, 6, 6], [0, 0, 6]],

[[7, 7, 7], [7, 0, 0]],

]



# 定义方块的颜色

COLORS = [

(255, 0, 0),

(0, 255, 0),

(0, 0, 255),

(255, 255, 0),

(255, 0, 255),

(0, 255, 255),

(128, 128, 128),

]



# 定义方块类

class Block:

def __init__(self):

self.shape = random.choice(SHAPES)

self.color = random.choice(COLORS)

self.x = WINDOW_WIDTH // 2 - BLOCK_SIZE * len(self.shape[0]) // 2

self.y = 0



def move_down(self):

self.y += BLOCK_SIZE



def move_left(self):

self.x -= BLOCK_SIZE



def move_right(self):

self.x += BLOCK_SIZE



def rotate(self):

self.shape = list(zip(*self.shape[::-1]))



def draw(self):

for i in range(len(self.shape)):

for j in range(len(self.shape[i])):

if self.shape[i][j] != 0:

pygame.draw.rect(window, self.color, (self.x + j * BLOCK_SIZE, self.y + i * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))



# 定义游戏主循环

def main():

clock = pygame.time.Clock()

score = 0

blocks = []

current_block = Block()

next_block = Block()



while True:

# 处理游戏事件

for event in pygame.event.get():

if event.type == pygame.QUIT:

pygame.quit()

quit()

elif event.type == pygame.KEYDOWN:

if event.key == pygame.K_LEFT:

current_block.move_left()

elif event.key == pygame.K_RIGHT:

current_block.move_right()

elif event.key == pygame.K_DOWN:

current_block.move_down()

elif event.key == pygame.K_UP:

current_block.rotate()



# 更新游戏状态

if current_block.y + BLOCK_SIZE * len(current_block.shape) >= WINDOW_HEIGHT:

blocks.append(current_block)

current_block = next_block

next_block = Block()



# 检查是否有满行

for i in range(WINDOW_HEIGHT // BLOCK_SIZE):

if all([(j, i) in [(b.x // BLOCK_SIZE, b.y // BLOCK_SIZE) for b in blocks] for j in range(WINDOW_WIDTH // BLOCK_SIZE)]):

score += 10

blocks = [b for b in blocks if b.y // BLOCK_SIZE != i]

for b in blocks:

if b.y // BLOCK_SIZE < i:

b.move_down()



current_block.move_down()



# 绘制游戏界面

window.fill(WINDOW_BG_COLOR)

for block in blocks:

block.draw()

current_block.draw()

next_block_x = WINDOW_WIDTH - BLOCK_SIZE * len(next_block.shape[0]) - 20

next_block_y = 100

for i in range(len(next_block.shape)):

for j in range(len(next_block.shape[i])):

if next_block.shape[i][j] != 0:

pygame.draw.rect(window, next_block.color, (next_block_x + j * BLOCK_SIZE, next_block_y + i * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))

score_text = font.render('Score: {}'.format(score), True, FONT_COLOR)

window.blit(score_text, (10, 10))

pygame.display.update()



# 控制游戏帧率

clock.tick(FPS)



if __name__ == '__main__':

main()

```

